set runtimepath^=$XDG_CONFIG_HOME/vim                                                                             
set runtimepath+=$XDG_DATA_HOME/vim                                                                               
set runtimepath+=$XDG_CONFIG_HOME/vim/after                                                                       

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim                                                             
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after                                                 

let g:netrw_home = $XDG_DATA_HOME."/vim"                                                                          
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')                                                                      

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')                                            
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')                                            
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')                                            
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')                                            
                                                                                                                      
if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif



let vimbundles = $XDG_CONFIG_HOME . "/vim/vimrc.bundles"

if filereadable(vimbundles)
  exe "source " . vimbundles
endif

let mapleader = ","

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile
set showcmd
set incsearch
set laststatus=2

set encoding=utf8
set tabstop=2 shiftwidth=2 expandtab

syntax on
set background=dark


set hlsearch          " hilight searches by default

set number
set showmode
set autoindent
set autoindent
set pastetoggle=<F2>
set ruler

" listen to external change in the file
set autoread

set showmatch
set showcmd
set report=0

" delete the current line
set backspace=eol,start,indent
set visualbell
set ttyfast

" set clipboard to unmaed
set clipboard=unnamed

set backupdir=~/.vim/tmp
set dir=~/.vim/tmp

set history=200

" Let vim knows I'm using zsh so that it can take advantage of completion and
" other stuff
let &shell="zsh"

" Active mouse click
set mouse=a

" stores the current cursor and command history
if has('nvim')
  set viminfo='100,\"1000,:40,%,n~/.nviminfo
else
  set viminfo='100,\"1000,:40,%,n~/.viminfo
endif

au BufReadPost * if line("'\"")|execute("normal `\"")|endif
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

set modeline

set background=dark
set cursorline

set foldmethod=marker
set fmr={{{,}}}

set foldlevel=0


" Toggle fold in which cursor is current on
nnoremap <space> @=((foldclosed(line(".")) < 0) ? 'zc' : 'zo')<CR>

" Default leader is set to \, with ',' I don't have to strech my finger to hit it
nmap <silent> <leader>h :silent :nohlsearch<CR>
" nmap <silent> <leader>ct :TlistToggle<CR>
nmap <leader>n :silent :NERDTreeToggle<CR>

" Start interactive EasyAlign in visual mode

nmap <leader>fw :FixWhitespace<CR>

" " CtlP mapping to match most used command-t mappings
let g:ctrlp_map = '<leader>t'
let g:ctrlp_prompt_mappings = { 'PrtSelectMove("j")': ['<c-p>', '<down>'], 'PrtSelectMove("k")': ['<c-n>', '<up>'] }
let g:ctrlp_prompt_mappings = { 'PrtHistory(-1)': ['<c-k>'], 'PrtHistory(1)': ['<c-j>'] }

" if $HOME != $PWD && filereadable(".vimrc")
"   source .vimrc
" endif

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
" xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
" nmap ga <Plug>(EasyAlign)
" vmap <Enter> <Plug>(EasyAlign)
" vmap <Enter> <Plug>(EasyAlign)
" " Start interactive EasyAlign with a Vim movement
" nmap <Leader>a <Plug>(EasyAlign)
"
let test#strategy = 'vtr'
nmap <silent> <leader>rn :TestNearest<CR>
nmap <silent> <leader>rf :TestFile<CR>
nmap <silent> <leader>rs :TestSuite<CR>
nmap <silent> <leader>rl :TestLast<CR>
nmap <silent> <leader>rg :TestVisit<CR>
