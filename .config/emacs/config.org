#+TITLE: Emacs Config
#+AUTHOR: Bruno Malvestuto
#+DESCRIPTION: My personal emacs config
#+STARTUP: showeverything
#+OPTIONS: TOC:2

* Table of Contents :toc:
- [[#import-programs][Import Programs]]
  - [[#straight-package-manager][Straight Package Manager]]
- [[#backup][Backup]]
- [[#dashboard][Dashboard]]
- [[#evil-mode][Evil Mode]]
  - [[#evil-textobj-tree-sitter][Evil TextObj Tree Sitter]]
  - [[#evil-surround][Evil Surround]]
  - [[#evil-vimish-fold][Evil vimish-fold]]
- [[#fonts][Fonts]]
  - [[#ligatures][Ligatures]]
- [[#general-keybinds][General Keybinds]]
- [[#git][Git]]
- [[#graphical-tweaks][Graphical Tweaks]]
  - [[#disable-menu-bar-tool-bar-and-scrool-bar][Disable menu bar, tool bar and scrool bar]]
  - [[#minibuffer][Minibuffer]]
  - [[#display-line-numbers-and-truncated-lines][Display line numbers and truncated lines]]
  - [[#enable-global-revert-mode][Enable global revert mode]]
  - [[#icons][Icons]]
- [[#ivy][Ivy]]
- [[#modeline][MODELINE]]
- [[#help][Help]]
  - [[#helpful][Helpful]]
- [[#programming][Programming]]
  - [[#claudemacs][Claudemacs]]
  - [[#ag][Ag]]
  - [[#company][Company]]
  - [[#yasnippet][Yasnippet]]
  - [[#markdown][Markdown]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#popwin][POPWIN]]
  - [[#elixir][Elixir]]
  - [[#aider][Aider]]
  - [[#tree-sitter][Tree Sitter]]
  - [[#eglot][Eglot]]
  - [[#breadcrumb][Breadcrumb]]
  - [[#hcl][HCL]]
  - [[#highlight-indentation-guide][Highlight Indentation Guide]]
- [[#workspace][Workspace]]
  - [[#perspective][Perspective]]
- [[#projectile][Projectile]]
  - [[#treemacs-projectile][Treemacs Projectile]]
  - [[#helm-projetile][Helm Projetile]]
- [[#org-mode][ORG Mode]]
  - [[#enabling-org-bullets][Enabling Org bullets]]
  - [[#org-tempo][ORG Tempo]]
  -  [[#toc][TOC]]
- [[#term][Term]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm Toggle]]
  - [[#eat][EAT]]
- [[#themes][Themes]]
  - [[#doom-themes][Doom themes]]
- [[#treemacs][Treemacs]]
- [[#which-key][Which Key]]

* Import Programs
** Straight Package Manager
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default 1)
#+end_src

* Backup

#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    ;; :custom 
    ;; (dashboard-modify-heading-icons '((recents . "file-text")
    ;; 				      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* Evil Mode

#+begin_src emacs-lisp
      (use-package evil
        :init ;; tweak evil's configuration before loading it
        (setq evil-search-module 'evil-search)
        (setq evil-ex-complete-emacs-commands nil)
        (setq evil-vsplit-window-right t)
        (setq evil-split-window-below t)
        (setq evil-shift-round nil)
        (setq evil-want-C-u-scroll t)
        ;; Settings required by evil collection
        (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
        (setq evil-want-keybinding nil)
        :config ;; tweak evil after loading it
        (evil-mode 1))

    (use-package evil-collection
      :after evil
      :ensure t
      :config
      (evil-collection-init))

    (use-package evil-commentary
    :after evil
    :hook ('prog-mode . evil-commentary-mode)
  )
#+end_src

** Evil TextObj Tree Sitter
#+begin_src emacs-lisp
  (use-package evil-textobj-tree-sitter
    :after evil)
#+end_src

** Evil Surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1)
    :after evil)
#+end_src

** Evil vimish-fold
#+begin_src emacs-lisp
  (use-package evil-vimish-fold
  :after evil
  :config
  (evil-vimish-fold-mode 1))
#+end_src

* Fonts

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono" ))
  (set-frame-font "JetBrains Mono 11")
#+end_src

** Ligatures

#+begin_src emacs-lisp
(use-package ligature
 :config
 (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                      "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
 (global-ligature-mode t)
)
#+end_src

* General Keybinds
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    (general-create-definer bm/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC") ;; in insert mode

    (bm/leader-keys
      "SPC" '(execute-extended-command :wk "Execute Command"))

    (bm/leader-keys
      "u" '(universal-argument, :wk "Universal argument")
      "f" '(:ignore t :wk "Files")
      "f e" '(:ignore t :wk "Emacs")
      "f e c"  '((lambda () (interactive)
                   (find-file "~/.config/emacs/config.org")) 
                 :wk "Open emacs config.org")

      "f e R" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload emacs config")

      ;; git --git-dir=$HOME/.dotfiles --work-tree=$HOME
      "f e g" '(
                (lambda () (interactive)
                  (require 'magit)
                  (let ((magit-git-global-arguments
                         `(,(substitute-env-vars "--git-dir=$HOME/.dotfiles")
                           ,(substitute-env-vars "--work-tree=$HOME")
                           ,@magit-git-global-arguments)))
                    (magit-status "~")
                    ;; You need to remember to C-M-c to exit recursive edit
                    (recursive-edit)
                    )
                  )
                :wk "Open Magit status buffer")
      )


    (bm/leader-keys
      "t" '(:ignore t :wk "Toogle")
      "t v" '(vterm-toggle :wk "Toggle vterm")
      "t t" '(treemacs :wk "Toggle Treemacs")
      "t s" '(treesit-inspect-mode :wk "Toogle Tree Sitter Inspect Mode"))

    (bm/leader-keys
      "b" '(:ignore t :wk "Buffer")
      "b i" '(ibuffer :wk "IBuffer")
      "b p" '(previous-buffer :wk "Previous")
      "b n" '(next-buffer :wk "Next"))

    (bm/leader-keys
      "p" '(:ignore t :wk "Project")
      "p f" '(helm-projectile-find-file :wk "Find File")
      "p s" '(helm-projectile-ag :wk "Search Project")
      "p a" '(projectile-find-implementation-or-test-other-window :wk "Open Test or Implementation")
      )

    ;; GIT
    (bm/leader-keys
      "g" '(:ignore t :wk "Git")
      "gs" '(magit   :wk "Status")
      )
    )
#+end_src

* Git

#+begin_src emacs-lisp
  (use-package magit)

#+end_src

* Graphical Tweaks
** Disable menu bar, tool bar and scrool bar
#+begin_src emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+end_src

** Minibuffer
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** Display line numbers and truncated lines

#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)
#+end_src

** Enable global revert mode

As tools like Claude Code can modify files directly on disk, it's useful to enable Emacs's auto-revert mode so that buffers stay in sync with external changes.

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** Icons

Using `nerd-icons` as `all-the-icons` is no longer supported by recent versions of `doom-modeline`

#+begin_src emacs-lisp
  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )
#+end_src

Treemacs requires all-the-icons
    
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

* Ivy
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config 
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

* MODELINE
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 28      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

#+end_src

* Help

** Helpful
#+begin_src emacs-lisp
(use-package helpful)
#+end_src

* Programming 
** Claudemacs
A convinient tool to run Claude Code inside Emacs
#+begin_src emacs-lisp
  (use-package claudemacs
    ;; Not loading it after project causes eglot to try to require a different file and fail with the following error
    ;; Error (use-package): eglot/:catch: Feature ‘project’ is now provided by a different file..
    :after project
    :straight '(claudemacs :type git :host github :repo "cpoile/claudemacs")
    :config
    (global-set-key (kbd "C-c c") #'claudemacs-transient-menu)

    (add-to-list 'display-buffer-alist
                 '("^\\*claudemacs"
  		 (display-buffer-in-side-window)
  		 (side . right)
  		 (window-width . 0.33)))

    ;; Auto-dismiss notifications (default: t)
    (setq claudemacs-notification-auto-dismiss-linux nil)

    ;; Play sound with notifications (requires canberra-gtk-play)
    ;; Common sound IDs: "message-new-instant", "bell", "dialog-error", "dialog-warning"
    (setq claudemacs-notification-sound-linux "message-new-instant")

    ;; Let projectile figure out the root directory where Claude Code will be run
    (setq claudemacs-prefer-projectile-root t)
    )
#+end_src

** Ag
#+begin_src emacs-lisp
(use-package ag)
#+end_src

** Company
#+begin_src  emacs-lisp
  (use-package company-mode
    :hook (after-init . global-company-mode)
    )
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src

** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** POPWIN
Popwin gives the ability to customize some attributes such asthe size and position.

#+begin_src emacs-lisp
  (use-package popwin
    :config (popwin-mode 1)
    )
#+end_src

** Elixir
#+begin_src emacs-lisp

  (add-to-list 'major-mode-remap-alist
               '(elixir-mode . elixir-ts-mode))

  ;; Ensure Elixir files are recognized
  (add-to-list 'auto-mode-alist '("\\.exs?\\'" . elixir-mode))

  (add-hook 'elixir-ts-mode-hook
            (lambda ()
              (eglot-ensure)
              (add-hook 'before-save-hook #'eglot-format-buffer nil 'local)))

  (use-package exunit
    ;; :straight (exunit :repo-dir "~/projects/personal/exunit")
  					; (exunit-key-command-prefix (kbd "SPC ,"))
    :hook (elixir-ts-mode . exunit-mode)
    )

  (use-package mix
    :config
    (add-hook 'elixir-ts-mode-hook 'mix-minor-mode))


 #+end_src

Show test run results at the bottom

#+begin_src emacs-lisp
(use-package popper
  :ensure t
  :init
  (setq popper-reference-buffers
        '("exunit-compilation.*\\*"
          ;; you can add more here
          ))
  (setq popper-display-control t
        popper-window-height 0.3)
  :config
  (popper-mode +1)
  (popper-echo-mode +1)) ;; optional: show popup hints in minibuffer
#+end_src

** Aider

#+begin_src emacs-lisp
  (use-package aidermacs
    :bind (("C-c a" . aidermacs-transient-menu))
    :config
    (setq aidermacs-watch-files t)
    (setq aidermacs-backend 'vterm)
    :custom
    ; See the Configuration section below
    (aidermacs-default-chat-mode 'architect)
    (aidermacs-default-model "sonnet"))
#+end_src

** Tree Sitter

#+begin_src emacs-lisp
  (use-package emacs
    :when (treesit-available-p)
    :config

    ;; (setq treesit-language-source-alist
    ;;       '(
    ;; 	    ;; (heex "https://github.com/phoenixframework/tree-sitter-heex")
    ;;         ;; (elixir "https://github.com/elixir-lang/tree-sitter-elixir")
    ;;         ;; Terraform
    ;;         (hcl "https://github.com/tree-sitter-grammars/tree-sitter-hcl")
    ;;         )) 

    (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

    )


  ;; (use-package tree-sitter)
#+end_src

** Eglot

#+begin_src emacs-lisp
  (use-package
    eglot
    :ensure nil
    :config

    ;; ElixirLS
    ;; Installation
    ;; mix deps.get
    ;; MIX_ENV=prod mix compile
    ;; MIX_ENV=prod mix elixir_ls.release2 -o ./release

    (add-to-list 'eglot-server-programs
                 `(elixir-ts-mode . (,(expand-file-name "~/elixir-ls/release/language_server.sh"))))


    ;; NextLS
    ;; # Installation
    ;; gh release download v0.19.2 \
    ;; --pattern next_ls_linux_amd64 \
    ;; --output ~/.local/bin/nextls \
    ;; --clobber \
    ;; --repo elixir-tools/next-ls
    ;; chmod +x ~/.local/bin/nextls

    ;;https://www.elixir-tools.dev/docs/next-ls/editors/#emacs-with-eglot

    ;; (add-to-list 'eglot-server-programs
    ;;              `((elixir-ts-mode heex-ts-mode elixir-mode) .
    ;;                ("nextls" "--stdio=true" :initializationOptions (:experimental (:completions (:enable t)))))
    ;;              )
    )
#+end_src

** Breadcrumb
#+begin_src emacs-lisp
(use-package breadcrumb)
#+end_src

** HCL
Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode)
#+end_src

** Highlight Indentation Guide

#+begin_src emacs-lisp
    (use-package highlight-indent-guides
      :hook ('prog-mode . highlight-indent-guides-mode)
      :config
      (setq highlight-indent-guides-method 'character)
      (setq highlight-indent-guides-responsive 'stack)

      ;; Update guides immediatly
      (setq highlight-indent-guides-delay 0)

      (setq highlight-indent-guides-auto-character-face-perc 25)
      (setq highlight-indent-guides-auto-stack-character-face-perc 70)
  )
#+end_src

* Workspace

** Perspective

#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c w"))  ; pick your own prefix key here
    :init
    (persp-mode))
#+end_src

* Projectile

#+begin_src emacs-lisp
  (use-package projectile)
#+end_src

** Treemacs Projectile

#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)
#+end_src

** Helm Projetile
#+begin_src emacs-lisp
  (use-package helm-projectile
    :after projectile)

  (use-package helm-ag
    :after helm)
#+end_src

* ORG Mode
** Enabling Org bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** ORG Tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

**  TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :hook ('org-mode . toc-org-mode)
    )
#+end_src

* Term
** Vterm

#+begin_src emacs-lisp
  (use-package vterm
  :hook ('vterm-mode . (lambda () (display-line-numbers-mode -1) ))
  :config
  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 5000))
#+end_src

** Vterm Toggle

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
  ;; kills the program as it would in most standard terminal programs.
  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.4))))
#+end_src

** EAT
#+begin_src emacs-lisp
  (straight-use-package
 '(eat :type git
       :host codeberg
       :repo "akib/emacs-eat"
       :files ("*.el" ("term" "term/*.el") "*.texi"
               "*.ti" ("terminfo/e" "terminfo/e/*")
               ("terminfo/65" "terminfo/65/*")
               ("integration" "integration/*")
               (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

* Themes
** Doom themes
#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* Treemacs

#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src


* Which Key
#+begin_src emacs-lisp
    (which-key-mode 1)
    (setq which-key-min-display-lines 6
          ;; the side-widow shows the mode line, my mode line of choice is dooms mode-line which very tall and overlaps the content at the bottom of the buffer, so that reason let's use the minibuffer.
          which-key-popup-type 'minibuffer)

#+end_src

#+begin_src emacs-lisp
  (use-package hide-mode-line)
#+end_src
