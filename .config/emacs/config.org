#+TITLE: Emacs Config
#+AUTHOR: Bruno Malvestuto
#+DESCRIPTION: My personal emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Import Programs

** Straight Package Manager
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)


  (setq straight-use-package-by-default 1)
#+end_src

* Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    ;; Settings required by evil collection
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config ;; tweak evil after loading it
    (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

* Fonts

#+begin_src emacs-lisp

  (add-to-list 'default-frame-alist '(font . "JetBrains Mono" ))
  (set-frame-font "JetBrains Mono 11")
#+end_src

** Ligatures

#+begin_src emacs-lisp
(use-package ligature
 :config
 (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                      "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
 (global-ligature-mode t)
)
#+end_src

* General Keybinds
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer bm/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC") ;; in insert mode

    (bm/leader-keys
      "b" '(:ignore t :wk "Files")
      "bp" '(previous-buffer :wk "Buffer") 
      "SPC" '(execute-extended-command :wk "Execute Command")
      )
    )
#+end_src

* Graphical Tweaks
** Disable menu bar, tool bar and scrool bar
#+begin_src emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+end_src

** Minibuffer
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** Display line numbers and truncated lines

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode 1)
#+end_src

** Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
#+end_src


* MODELINE
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

#+end_src

* Programming 

** Elixir
#+begin_src emacs-lisp
  (use-package
    elixir-ts-mode
    :hook (elixir-ts-mode . eglot-ensure)
    (elixir-ts-mode
     .
     (lambda ()
       (push '(">=" . ?\u2265) prettify-symbols-alist)
       (push '("<=" . ?\u2264) prettify-symbols-alist)
       (push '("!=" . ?\u2260) prettify-symbols-alist)
       (push '("==" . ?\u2A75) prettify-symbols-alist)
       (push '("=~" . ?\u2245) prettify-symbols-alist)
       (push '("<-" . ?\u2190) prettify-symbols-alist)
       (push '("->" . ?\u2192) prettify-symbols-alist)
       (push '("<-" . ?\u2190) prettify-symbols-alist)
       (push '("|>" . ?\u25B7) prettify-symbols-alist)))
    (before-save . eglot-format))

  (use-package exunit
    :config
    :hook (elixir-ts-mode . exunit-mode)
    )

  (use-package mix
    :config
    (add-hook 'elixir-ts-mode-hook 'mix-minor-mode))


 #+end_src

** Tree Sitter
#+begin_src emacs-lisp
  (use-package emacs
    :when (treesit-available-p)
    :config

    (setq treesit-language-source-alist
          '((heex "https://github.com/phoenixframework/tree-sitter-heex")
            (elixir "https://github.com/elixir-lang/tree-sitter-elixir"))) 

    (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

    (add-to-list 'major-mode-remap-alist
     '((elixir-mode . elixir-ts-mode)))
    )
#+end_src

** Eglot
#+begin_src emacs-lisp
  (use-package
    eglot
    :ensure nil
    :config
    (add-to-list 'eglot-server-programs '(elixir-ts-mode "~/.local/bin/language_server.sh")))
#+end_src


* ORG Mode
** Enabling Org bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* Themes
** Doom themes
#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* Which Key
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
    :config
    (setq which-key-min-display-lines 6)
     )
#+end_src
